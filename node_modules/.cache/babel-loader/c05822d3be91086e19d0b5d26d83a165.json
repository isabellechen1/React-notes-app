{"ast":null,"code":"var _jsxFileName = \"/Users/isabellechen/notes-app/src/App.js\";\nimport React from \"react\";\nimport Sidebar from \"./components/Sidebar\";\nimport Editor from \"./components/Editor\";\nimport Split from \"react-split\";\nimport { nanoid } from \"nanoid\";\nimport Navbar from \"./components/Navbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  const [notes, setNotes] = React.useState(() => JSON.parse(localStorage.getItem(\"notes\")) || []);\n  const [currentNoteId, setCurrentNoteId] = React.useState(notes[0] && notes[0].id || \"\");\n  React.useEffect(() => {\n    localStorage.setItem(\"notes\", JSON.stringify(notes));\n  }, [notes]);\n\n  function createNewNote() {\n    const newNote = {\n      id: nanoid(),\n      body: \"# Type your markdown note's title here\"\n    };\n    setNotes(prevNotes => [newNote, ...prevNotes]);\n    setCurrentNoteId(newNote.id);\n  }\n\n  function updateNote(text) {\n    // Put the most recently-modified note at the top\n    setNotes(oldNotes => {\n      const newArray = [];\n\n      for (let i = 0; i < oldNotes.length; i++) {\n        const oldNote = oldNotes[i];\n\n        if (oldNote.id === currentNoteId) {\n          newArray.unshift({ ...oldNote,\n            body: text\n          });\n        } else {\n          newArray.push(oldNote);\n        }\n      }\n\n      return newArray;\n    });\n  }\n\n  function deleteNote(event, noteId) {\n    event.stopPropagation();\n    setNotes(oldNotes => oldNotes.filter(note => note.id !== noteId));\n  }\n\n  function findCurrentNote() {\n    return notes.find(note => {\n      return note.id === currentNoteId;\n    }) || notes[0];\n  }\n\n  const [darkMode, setDarkMode] = React.useState(false);\n\n  function toggleDarkMode() {\n    setDarkMode(prevMode => !prevMode);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: notes.length > 0 ? /*#__PURE__*/_jsxDEV(Split, {\n      sizes: [30, 70],\n      direction: \"horizontal\",\n      className: \"split\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n        notes: notes,\n        darkMode: true,\n        currentNote: findCurrentNote(),\n        setCurrentNoteId: setCurrentNoteId,\n        newNote: createNewNote,\n        deleteNote: deleteNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), currentNoteId && notes.length > 0 && /*#__PURE__*/_jsxDEV(Editor, {\n        currentNote: findCurrentNote(),\n        updateNote: updateNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-notes\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"You have no notes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"first-note\",\n        onClick: createNewNote,\n        children: \"Create one now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/Users/isabellechen/notes-app/src/App.js"],"names":["React","Sidebar","Editor","Split","nanoid","Navbar","App","notes","setNotes","useState","JSON","parse","localStorage","getItem","currentNoteId","setCurrentNoteId","id","useEffect","setItem","stringify","createNewNote","newNote","body","prevNotes","updateNote","text","oldNotes","newArray","i","length","oldNote","unshift","push","deleteNote","event","noteId","stopPropagation","filter","note","findCurrentNote","find","darkMode","setDarkMode","toggleDarkMode","prevMode"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport Sidebar from \"./components/Sidebar\"\nimport Editor from \"./components/Editor\"\nimport Split from \"react-split\"\nimport {nanoid} from \"nanoid\"\nimport Navbar from \"./components/Navbar\"\n\nexport default function App() {\n    const [notes, setNotes] = React.useState(\n        () => JSON.parse(localStorage.getItem(\"notes\")) || []\n    )\n    const [currentNoteId, setCurrentNoteId] = React.useState(\n        (notes[0] && notes[0].id) || \"\"\n    )\n    \n    React.useEffect(() => {\n        localStorage.setItem(\"notes\", JSON.stringify(notes))\n    }, [notes])\n    \n    function createNewNote() {\n        const newNote = {\n            id: nanoid(),\n            body: \"# Type your markdown note's title here\"\n        }\n        setNotes(prevNotes => [newNote, ...prevNotes])\n        setCurrentNoteId(newNote.id)\n    }\n    \n    function updateNote(text) {\n        // Put the most recently-modified note at the top\n        setNotes(oldNotes => {\n            const newArray = []\n            for(let i = 0; i < oldNotes.length; i++) {\n                const oldNote = oldNotes[i]\n                if(oldNote.id === currentNoteId) {\n                    newArray.unshift({ ...oldNote, body: text })\n                } else {\n                    newArray.push(oldNote)\n                }\n            }\n            return newArray\n        })\n    }\n    \n    \n    function deleteNote(event, noteId) {\n        event.stopPropagation()\n        setNotes(oldNotes => oldNotes.filter(note => note.id !== noteId))\n    }\n    \n    function findCurrentNote() {\n        return notes.find(note => {\n            return note.id === currentNoteId\n        }) || notes[0]\n    }\n    \n    const [darkMode, setDarkMode] = React.useState(false)\n\n    function toggleDarkMode(){\n        setDarkMode(prevMode => !prevMode)\n    }\n\n    return (\n        <main>\n        {\n            notes.length > 0 \n            ?\n            <Split \n                sizes={[30, 70]} \n                direction=\"horizontal\" \n                className=\"split\"\n            >\n                <Sidebar\n                    notes={notes}\n                    darkMode\n                    currentNote={findCurrentNote()}\n                    setCurrentNoteId={setCurrentNoteId}\n                    newNote={createNewNote}\n                    deleteNote={deleteNote}\n                />\n                {\n                    currentNoteId && \n                    notes.length > 0 &&\n                    <Editor \n                        currentNote={findCurrentNote()} \n                        updateNote={updateNote}\n                    />\n                }\n            </Split>\n            :\n            <div className=\"no-notes\">\n                <h1>You have no notes</h1>\n                <button \n                    className=\"first-note\" \n                    onClick={createNewNote}\n                >\n                    Create one now\n                </button>\n            </div>   \n        }\n        </main>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}